// Generated by view binder compiler. Do not edit!
package com.anity.healthpunch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.anity.healthpunch.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentScheduleBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final GridLayout d1;

  @NonNull
  public final GridLayout d2;

  @NonNull
  public final GridLayout d3;

  @NonNull
  public final GridLayout d4;

  @NonNull
  public final GridLayout d5;

  @NonNull
  public final LinearLayout datetime;

  private FragmentScheduleBinding(@NonNull FrameLayout rootView, @NonNull GridLayout d1,
      @NonNull GridLayout d2, @NonNull GridLayout d3, @NonNull GridLayout d4,
      @NonNull GridLayout d5, @NonNull LinearLayout datetime) {
    this.rootView = rootView;
    this.d1 = d1;
    this.d2 = d2;
    this.d3 = d3;
    this.d4 = d4;
    this.d5 = d5;
    this.datetime = datetime;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentScheduleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentScheduleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_schedule, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentScheduleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.d1;
      GridLayout d1 = ViewBindings.findChildViewById(rootView, id);
      if (d1 == null) {
        break missingId;
      }

      id = R.id.d2;
      GridLayout d2 = ViewBindings.findChildViewById(rootView, id);
      if (d2 == null) {
        break missingId;
      }

      id = R.id.d3;
      GridLayout d3 = ViewBindings.findChildViewById(rootView, id);
      if (d3 == null) {
        break missingId;
      }

      id = R.id.d4;
      GridLayout d4 = ViewBindings.findChildViewById(rootView, id);
      if (d4 == null) {
        break missingId;
      }

      id = R.id.d5;
      GridLayout d5 = ViewBindings.findChildViewById(rootView, id);
      if (d5 == null) {
        break missingId;
      }

      id = R.id.datetime;
      LinearLayout datetime = ViewBindings.findChildViewById(rootView, id);
      if (datetime == null) {
        break missingId;
      }

      return new FragmentScheduleBinding((FrameLayout) rootView, d1, d2, d3, d4, d5, datetime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
